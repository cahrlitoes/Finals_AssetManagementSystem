#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Finals_AssetManagementSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Asset Management System")]
	public partial class AssetManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertAsset(Asset instance);
    partial void UpdateAsset(Asset instance);
    partial void DeleteAsset(Asset instance);
    partial void InsertBorrowDetail(BorrowDetail instance);
    partial void UpdateBorrowDetail(BorrowDetail instance);
    partial void DeleteBorrowDetail(BorrowDetail instance);
    partial void InsertBorrower(Borrower instance);
    partial void UpdateBorrower(Borrower instance);
    partial void DeleteBorrower(Borrower instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertRepairPerson(RepairPerson instance);
    partial void UpdateRepairPerson(RepairPerson instance);
    partial void DeleteRepairPerson(RepairPerson instance);
    partial void InsertRequestStatus(RequestStatus instance);
    partial void UpdateRequestStatus(RequestStatus instance);
    partial void DeleteRequestStatus(RequestStatus instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertMaintenanceSchedule(MaintenanceSchedule instance);
    partial void UpdateMaintenanceSchedule(MaintenanceSchedule instance);
    partial void DeleteMaintenanceSchedule(MaintenanceSchedule instance);
    #endregion
		
		public AssetManagementDataContext() : 
				base(global::Finals_AssetManagementSystem.Properties.Settings.Default.Asset_Management_SystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssetManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Asset> Assets
		{
			get
			{
				return this.GetTable<Asset>();
			}
		}
		
		public System.Data.Linq.Table<BorrowDetail> BorrowDetails
		{
			get
			{
				return this.GetTable<BorrowDetail>();
			}
		}
		
		public System.Data.Linq.Table<Borrower> Borrowers
		{
			get
			{
				return this.GetTable<Borrower>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<RepairPerson> RepairPersons
		{
			get
			{
				return this.GetTable<RepairPerson>();
			}
		}
		
		public System.Data.Linq.Table<RequestStatus> RequestStatus
		{
			get
			{
				return this.GetTable<RequestStatus>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<MaintenanceSchedule> MaintenanceSchedules
		{
			get
			{
				return this.GetTable<MaintenanceSchedule>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdminID;
		
		private string _AdminFN;
		
		private string _AdminLN;
		
		private string _AdminUN;
		
		private string _AdminPW;
		
		private string _AdminEmail;
		
		private string _AdminNum;
		
		private EntitySet<RequestStatus> _RequestStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    partial void OnAdminFNChanging(string value);
    partial void OnAdminFNChanged();
    partial void OnAdminLNChanging(string value);
    partial void OnAdminLNChanged();
    partial void OnAdminUNChanging(string value);
    partial void OnAdminUNChanged();
    partial void OnAdminPWChanging(string value);
    partial void OnAdminPWChanged();
    partial void OnAdminEmailChanging(string value);
    partial void OnAdminEmailChanged();
    partial void OnAdminNumChanging(string value);
    partial void OnAdminNumChanged();
    #endregion
		
		public Admin()
		{
			this._RequestStatus = new EntitySet<RequestStatus>(new Action<RequestStatus>(this.attach_RequestStatus), new Action<RequestStatus>(this.detach_RequestStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminFN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminFN
		{
			get
			{
				return this._AdminFN;
			}
			set
			{
				if ((this._AdminFN != value))
				{
					this.OnAdminFNChanging(value);
					this.SendPropertyChanging();
					this._AdminFN = value;
					this.SendPropertyChanged("AdminFN");
					this.OnAdminFNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminLN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminLN
		{
			get
			{
				return this._AdminLN;
			}
			set
			{
				if ((this._AdminLN != value))
				{
					this.OnAdminLNChanging(value);
					this.SendPropertyChanging();
					this._AdminLN = value;
					this.SendPropertyChanged("AdminLN");
					this.OnAdminLNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminUN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminUN
		{
			get
			{
				return this._AdminUN;
			}
			set
			{
				if ((this._AdminUN != value))
				{
					this.OnAdminUNChanging(value);
					this.SendPropertyChanging();
					this._AdminUN = value;
					this.SendPropertyChanged("AdminUN");
					this.OnAdminUNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminPW", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminPW
		{
			get
			{
				return this._AdminPW;
			}
			set
			{
				if ((this._AdminPW != value))
				{
					this.OnAdminPWChanging(value);
					this.SendPropertyChanging();
					this._AdminPW = value;
					this.SendPropertyChanged("AdminPW");
					this.OnAdminPWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminEmail
		{
			get
			{
				return this._AdminEmail;
			}
			set
			{
				if ((this._AdminEmail != value))
				{
					this.OnAdminEmailChanging(value);
					this.SendPropertyChanging();
					this._AdminEmail = value;
					this.SendPropertyChanged("AdminEmail");
					this.OnAdminEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminNum", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string AdminNum
		{
			get
			{
				return this._AdminNum;
			}
			set
			{
				if ((this._AdminNum != value))
				{
					this.OnAdminNumChanging(value);
					this.SendPropertyChanging();
					this._AdminNum = value;
					this.SendPropertyChanged("AdminNum");
					this.OnAdminNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_RequestStatus", Storage="_RequestStatus", ThisKey="AdminID", OtherKey="AdminID")]
		public EntitySet<RequestStatus> RequestStatus
		{
			get
			{
				return this._RequestStatus;
			}
			set
			{
				this._RequestStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequestStatus(RequestStatus entity)
		{
			this.SendPropertyChanging();
			entity.Admin = this;
		}
		
		private void detach_RequestStatus(RequestStatus entity)
		{
			this.SendPropertyChanging();
			entity.Admin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Asset")]
	public partial class Asset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssetID;
		
		private string _AssetName;
		
		private string _AssetType;
		
		private int _AssetQty;
		
		private int _AssetAvailQty;
		
		private System.DateTime _AssetPurchasedDate;
		
		private string _AssetStatus;
		
		private int _LocationID;
		
		private int _SupplierID;
		
		private EntitySet<BorrowDetail> _BorrowDetails;
		
		private EntitySet<MaintenanceSchedule> _MaintenanceSchedules;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssetIDChanging(int value);
    partial void OnAssetIDChanged();
    partial void OnAssetNameChanging(string value);
    partial void OnAssetNameChanged();
    partial void OnAssetTypeChanging(string value);
    partial void OnAssetTypeChanged();
    partial void OnAssetQtyChanging(int value);
    partial void OnAssetQtyChanged();
    partial void OnAssetAvailQtyChanging(int value);
    partial void OnAssetAvailQtyChanged();
    partial void OnAssetPurchasedDateChanging(System.DateTime value);
    partial void OnAssetPurchasedDateChanged();
    partial void OnAssetStatusChanging(string value);
    partial void OnAssetStatusChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    #endregion
		
		public Asset()
		{
			this._BorrowDetails = new EntitySet<BorrowDetail>(new Action<BorrowDetail>(this.attach_BorrowDetails), new Action<BorrowDetail>(this.detach_BorrowDetails));
			this._MaintenanceSchedules = new EntitySet<MaintenanceSchedule>(new Action<MaintenanceSchedule>(this.attach_MaintenanceSchedules), new Action<MaintenanceSchedule>(this.detach_MaintenanceSchedules));
			this._Location = default(EntityRef<Location>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssetID
		{
			get
			{
				return this._AssetID;
			}
			set
			{
				if ((this._AssetID != value))
				{
					this.OnAssetIDChanging(value);
					this.SendPropertyChanging();
					this._AssetID = value;
					this.SendPropertyChanged("AssetID");
					this.OnAssetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetName
		{
			get
			{
				return this._AssetName;
			}
			set
			{
				if ((this._AssetName != value))
				{
					this.OnAssetNameChanging(value);
					this.SendPropertyChanging();
					this._AssetName = value;
					this.SendPropertyChanged("AssetName");
					this.OnAssetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetType
		{
			get
			{
				return this._AssetType;
			}
			set
			{
				if ((this._AssetType != value))
				{
					this.OnAssetTypeChanging(value);
					this.SendPropertyChanging();
					this._AssetType = value;
					this.SendPropertyChanged("AssetType");
					this.OnAssetTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetQty", DbType="Int NOT NULL")]
		public int AssetQty
		{
			get
			{
				return this._AssetQty;
			}
			set
			{
				if ((this._AssetQty != value))
				{
					this.OnAssetQtyChanging(value);
					this.SendPropertyChanging();
					this._AssetQty = value;
					this.SendPropertyChanged("AssetQty");
					this.OnAssetQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetAvailQty", DbType="Int NOT NULL")]
		public int AssetAvailQty
		{
			get
			{
				return this._AssetAvailQty;
			}
			set
			{
				if ((this._AssetAvailQty != value))
				{
					this.OnAssetAvailQtyChanging(value);
					this.SendPropertyChanging();
					this._AssetAvailQty = value;
					this.SendPropertyChanged("AssetAvailQty");
					this.OnAssetAvailQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetPurchasedDate", DbType="Date NOT NULL")]
		public System.DateTime AssetPurchasedDate
		{
			get
			{
				return this._AssetPurchasedDate;
			}
			set
			{
				if ((this._AssetPurchasedDate != value))
				{
					this.OnAssetPurchasedDateChanging(value);
					this.SendPropertyChanging();
					this._AssetPurchasedDate = value;
					this.SendPropertyChanged("AssetPurchasedDate");
					this.OnAssetPurchasedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssetStatus
		{
			get
			{
				return this._AssetStatus;
			}
			set
			{
				if ((this._AssetStatus != value))
				{
					this.OnAssetStatusChanging(value);
					this.SendPropertyChanging();
					this._AssetStatus = value;
					this.SendPropertyChanged("AssetStatus");
					this.OnAssetStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int NOT NULL")]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_BorrowDetail", Storage="_BorrowDetails", ThisKey="AssetID", OtherKey="AssetID")]
		public EntitySet<BorrowDetail> BorrowDetails
		{
			get
			{
				return this._BorrowDetails;
			}
			set
			{
				this._BorrowDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_MaintenanceSchedule", Storage="_MaintenanceSchedules", ThisKey="AssetID", OtherKey="AssetID")]
		public EntitySet<MaintenanceSchedule> MaintenanceSchedules
		{
			get
			{
				return this._MaintenanceSchedules;
			}
			set
			{
				this._MaintenanceSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Asset", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Asset", Storage="_Supplier", ThisKey="SupplierID", OtherKey="SupplierID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Assets.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Assets.Add(this);
						this._SupplierID = value.SupplierID;
					}
					else
					{
						this._SupplierID = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_MaintenanceSchedules(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_MaintenanceSchedules(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BorrowDetails")]
	public partial class BorrowDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BorrowDetailsID;
		
		private int _BorrowerID;
		
		private int _AssetID;
		
		private System.DateTime _RequestedOn;
		
		private string _BorrowReason;
		
		private System.DateTime _BorrowedOn;
		
		private System.Nullable<System.DateTime> _ReturnBy;
		
		private System.Nullable<System.DateTime> _ReturnedOn;
		
		private decimal _Penalty;
		
		private EntitySet<RequestStatus> _RequestStatus;
		
		private EntityRef<Asset> _Asset;
		
		private EntityRef<Borrower> _Borrower;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBorrowDetailsIDChanging(int value);
    partial void OnBorrowDetailsIDChanged();
    partial void OnBorrowerIDChanging(int value);
    partial void OnBorrowerIDChanged();
    partial void OnAssetIDChanging(int value);
    partial void OnAssetIDChanged();
    partial void OnRequestedOnChanging(System.DateTime value);
    partial void OnRequestedOnChanged();
    partial void OnBorrowReasonChanging(string value);
    partial void OnBorrowReasonChanged();
    partial void OnBorrowedOnChanging(System.DateTime value);
    partial void OnBorrowedOnChanged();
    partial void OnReturnByChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnByChanged();
    partial void OnReturnedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnedOnChanged();
    partial void OnPenaltyChanging(decimal value);
    partial void OnPenaltyChanged();
    #endregion
		
		public BorrowDetail()
		{
			this._RequestStatus = new EntitySet<RequestStatus>(new Action<RequestStatus>(this.attach_RequestStatus), new Action<RequestStatus>(this.detach_RequestStatus));
			this._Asset = default(EntityRef<Asset>);
			this._Borrower = default(EntityRef<Borrower>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowDetailsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BorrowDetailsID
		{
			get
			{
				return this._BorrowDetailsID;
			}
			set
			{
				if ((this._BorrowDetailsID != value))
				{
					this.OnBorrowDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._BorrowDetailsID = value;
					this.SendPropertyChanged("BorrowDetailsID");
					this.OnBorrowDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerID", DbType="Int NOT NULL")]
		public int BorrowerID
		{
			get
			{
				return this._BorrowerID;
			}
			set
			{
				if ((this._BorrowerID != value))
				{
					if (this._Borrower.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowerIDChanging(value);
					this.SendPropertyChanging();
					this._BorrowerID = value;
					this.SendPropertyChanged("BorrowerID");
					this.OnBorrowerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetID", DbType="Int NOT NULL")]
		public int AssetID
		{
			get
			{
				return this._AssetID;
			}
			set
			{
				if ((this._AssetID != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetIDChanging(value);
					this.SendPropertyChanging();
					this._AssetID = value;
					this.SendPropertyChanged("AssetID");
					this.OnAssetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedOn", DbType="DateTime NOT NULL")]
		public System.DateTime RequestedOn
		{
			get
			{
				return this._RequestedOn;
			}
			set
			{
				if ((this._RequestedOn != value))
				{
					this.OnRequestedOnChanging(value);
					this.SendPropertyChanging();
					this._RequestedOn = value;
					this.SendPropertyChanged("RequestedOn");
					this.OnRequestedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowReason", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BorrowReason
		{
			get
			{
				return this._BorrowReason;
			}
			set
			{
				if ((this._BorrowReason != value))
				{
					this.OnBorrowReasonChanging(value);
					this.SendPropertyChanging();
					this._BorrowReason = value;
					this.SendPropertyChanged("BorrowReason");
					this.OnBorrowReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowedOn", DbType="DateTime NOT NULL")]
		public System.DateTime BorrowedOn
		{
			get
			{
				return this._BorrowedOn;
			}
			set
			{
				if ((this._BorrowedOn != value))
				{
					this.OnBorrowedOnChanging(value);
					this.SendPropertyChanging();
					this._BorrowedOn = value;
					this.SendPropertyChanged("BorrowedOn");
					this.OnBorrowedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnBy", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnBy
		{
			get
			{
				return this._ReturnBy;
			}
			set
			{
				if ((this._ReturnBy != value))
				{
					this.OnReturnByChanging(value);
					this.SendPropertyChanging();
					this._ReturnBy = value;
					this.SendPropertyChanged("ReturnBy");
					this.OnReturnByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReturnedOn
		{
			get
			{
				return this._ReturnedOn;
			}
			set
			{
				if ((this._ReturnedOn != value))
				{
					this.OnReturnedOnChanging(value);
					this.SendPropertyChanging();
					this._ReturnedOn = value;
					this.SendPropertyChanged("ReturnedOn");
					this.OnReturnedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penalty", DbType="Money NOT NULL")]
		public decimal Penalty
		{
			get
			{
				return this._Penalty;
			}
			set
			{
				if ((this._Penalty != value))
				{
					this.OnPenaltyChanging(value);
					this.SendPropertyChanging();
					this._Penalty = value;
					this.SendPropertyChanged("Penalty");
					this.OnPenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowDetail_RequestStatus", Storage="_RequestStatus", ThisKey="BorrowDetailsID", OtherKey="BorrowDetailsID")]
		public EntitySet<RequestStatus> RequestStatus
		{
			get
			{
				return this._RequestStatus;
			}
			set
			{
				this._RequestStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_BorrowDetail", Storage="_Asset", ThisKey="AssetID", OtherKey="AssetID", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.BorrowDetails.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.BorrowDetails.Add(this);
						this._AssetID = value.AssetID;
					}
					else
					{
						this._AssetID = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borrower_BorrowDetail", Storage="_Borrower", ThisKey="BorrowerID", OtherKey="BorrowerID", IsForeignKey=true)]
		public Borrower Borrower
		{
			get
			{
				return this._Borrower.Entity;
			}
			set
			{
				Borrower previousValue = this._Borrower.Entity;
				if (((previousValue != value) 
							|| (this._Borrower.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Borrower.Entity = null;
						previousValue.BorrowDetails.Remove(this);
					}
					this._Borrower.Entity = value;
					if ((value != null))
					{
						value.BorrowDetails.Add(this);
						this._BorrowerID = value.BorrowerID;
					}
					else
					{
						this._BorrowerID = default(int);
					}
					this.SendPropertyChanged("Borrower");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequestStatus(RequestStatus entity)
		{
			this.SendPropertyChanging();
			entity.BorrowDetail = this;
		}
		
		private void detach_RequestStatus(RequestStatus entity)
		{
			this.SendPropertyChanging();
			entity.BorrowDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Borrower")]
	public partial class Borrower : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BorrowerID;
		
		private string _BorrowerFN;
		
		private string _BorrowerLN;
		
		private string _BorrowerType;
		
		private string _BorrowerUN;
		
		private string _BorrowerPW;
		
		private string _BorrowerEmail;
		
		private string _BorrowerNum;
		
		private EntitySet<BorrowDetail> _BorrowDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBorrowerIDChanging(int value);
    partial void OnBorrowerIDChanged();
    partial void OnBorrowerFNChanging(string value);
    partial void OnBorrowerFNChanged();
    partial void OnBorrowerLNChanging(string value);
    partial void OnBorrowerLNChanged();
    partial void OnBorrowerTypeChanging(string value);
    partial void OnBorrowerTypeChanged();
    partial void OnBorrowerUNChanging(string value);
    partial void OnBorrowerUNChanged();
    partial void OnBorrowerPWChanging(string value);
    partial void OnBorrowerPWChanged();
    partial void OnBorrowerEmailChanging(string value);
    partial void OnBorrowerEmailChanged();
    partial void OnBorrowerNumChanging(string value);
    partial void OnBorrowerNumChanged();
    #endregion
		
		public Borrower()
		{
			this._BorrowDetails = new EntitySet<BorrowDetail>(new Action<BorrowDetail>(this.attach_BorrowDetails), new Action<BorrowDetail>(this.detach_BorrowDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BorrowerID
		{
			get
			{
				return this._BorrowerID;
			}
			set
			{
				if ((this._BorrowerID != value))
				{
					this.OnBorrowerIDChanging(value);
					this.SendPropertyChanging();
					this._BorrowerID = value;
					this.SendPropertyChanged("BorrowerID");
					this.OnBorrowerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerFN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BorrowerFN
		{
			get
			{
				return this._BorrowerFN;
			}
			set
			{
				if ((this._BorrowerFN != value))
				{
					this.OnBorrowerFNChanging(value);
					this.SendPropertyChanging();
					this._BorrowerFN = value;
					this.SendPropertyChanged("BorrowerFN");
					this.OnBorrowerFNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerLN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BorrowerLN
		{
			get
			{
				return this._BorrowerLN;
			}
			set
			{
				if ((this._BorrowerLN != value))
				{
					this.OnBorrowerLNChanging(value);
					this.SendPropertyChanging();
					this._BorrowerLN = value;
					this.SendPropertyChanged("BorrowerLN");
					this.OnBorrowerLNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BorrowerType
		{
			get
			{
				return this._BorrowerType;
			}
			set
			{
				if ((this._BorrowerType != value))
				{
					this.OnBorrowerTypeChanging(value);
					this.SendPropertyChanging();
					this._BorrowerType = value;
					this.SendPropertyChanged("BorrowerType");
					this.OnBorrowerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerUN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BorrowerUN
		{
			get
			{
				return this._BorrowerUN;
			}
			set
			{
				if ((this._BorrowerUN != value))
				{
					this.OnBorrowerUNChanging(value);
					this.SendPropertyChanging();
					this._BorrowerUN = value;
					this.SendPropertyChanged("BorrowerUN");
					this.OnBorrowerUNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerPW", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BorrowerPW
		{
			get
			{
				return this._BorrowerPW;
			}
			set
			{
				if ((this._BorrowerPW != value))
				{
					this.OnBorrowerPWChanging(value);
					this.SendPropertyChanging();
					this._BorrowerPW = value;
					this.SendPropertyChanged("BorrowerPW");
					this.OnBorrowerPWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BorrowerEmail
		{
			get
			{
				return this._BorrowerEmail;
			}
			set
			{
				if ((this._BorrowerEmail != value))
				{
					this.OnBorrowerEmailChanging(value);
					this.SendPropertyChanging();
					this._BorrowerEmail = value;
					this.SendPropertyChanged("BorrowerEmail");
					this.OnBorrowerEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerNum", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string BorrowerNum
		{
			get
			{
				return this._BorrowerNum;
			}
			set
			{
				if ((this._BorrowerNum != value))
				{
					this.OnBorrowerNumChanging(value);
					this.SendPropertyChanging();
					this._BorrowerNum = value;
					this.SendPropertyChanged("BorrowerNum");
					this.OnBorrowerNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borrower_BorrowDetail", Storage="_BorrowDetails", ThisKey="BorrowerID", OtherKey="BorrowerID")]
		public EntitySet<BorrowDetail> BorrowDetails
		{
			get
			{
				return this._BorrowDetails;
			}
			set
			{
				this._BorrowDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Borrower = this;
		}
		
		private void detach_BorrowDetails(BorrowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Borrower = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private int _RoomNo;
		
		private int _FloorNo;
		
		private string _BldgName;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnRoomNoChanging(int value);
    partial void OnRoomNoChanged();
    partial void OnFloorNoChanging(int value);
    partial void OnFloorNoChanged();
    partial void OnBldgNameChanging(string value);
    partial void OnBldgNameChanged();
    #endregion
		
		public Location()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNo", DbType="Int NOT NULL")]
		public int RoomNo
		{
			get
			{
				return this._RoomNo;
			}
			set
			{
				if ((this._RoomNo != value))
				{
					this.OnRoomNoChanging(value);
					this.SendPropertyChanging();
					this._RoomNo = value;
					this.SendPropertyChanged("RoomNo");
					this.OnRoomNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloorNo", DbType="Int NOT NULL")]
		public int FloorNo
		{
			get
			{
				return this._FloorNo;
			}
			set
			{
				if ((this._FloorNo != value))
				{
					this.OnFloorNoChanging(value);
					this.SendPropertyChanging();
					this._FloorNo = value;
					this.SendPropertyChanged("FloorNo");
					this.OnFloorNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BldgName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BldgName
		{
			get
			{
				return this._BldgName;
			}
			set
			{
				if ((this._BldgName != value))
				{
					this.OnBldgNameChanging(value);
					this.SendPropertyChanging();
					this._BldgName = value;
					this.SendPropertyChanged("BldgName");
					this.OnBldgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Asset", Storage="_Assets", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RepairPerson")]
	public partial class RepairPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RepairPersonID;
		
		private string _RepairPersonFN;
		
		private string _RepairPersonLN;
		
		private string _RepairPersonNum;
		
		private string _RepairPersonEmail;
		
		private EntitySet<MaintenanceSchedule> _MaintenanceSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRepairPersonIDChanging(int value);
    partial void OnRepairPersonIDChanged();
    partial void OnRepairPersonFNChanging(string value);
    partial void OnRepairPersonFNChanged();
    partial void OnRepairPersonLNChanging(string value);
    partial void OnRepairPersonLNChanged();
    partial void OnRepairPersonNumChanging(string value);
    partial void OnRepairPersonNumChanged();
    partial void OnRepairPersonEmailChanging(string value);
    partial void OnRepairPersonEmailChanged();
    #endregion
		
		public RepairPerson()
		{
			this._MaintenanceSchedules = new EntitySet<MaintenanceSchedule>(new Action<MaintenanceSchedule>(this.attach_MaintenanceSchedules), new Action<MaintenanceSchedule>(this.detach_MaintenanceSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairPersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RepairPersonID
		{
			get
			{
				return this._RepairPersonID;
			}
			set
			{
				if ((this._RepairPersonID != value))
				{
					this.OnRepairPersonIDChanging(value);
					this.SendPropertyChanging();
					this._RepairPersonID = value;
					this.SendPropertyChanged("RepairPersonID");
					this.OnRepairPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairPersonFN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RepairPersonFN
		{
			get
			{
				return this._RepairPersonFN;
			}
			set
			{
				if ((this._RepairPersonFN != value))
				{
					this.OnRepairPersonFNChanging(value);
					this.SendPropertyChanging();
					this._RepairPersonFN = value;
					this.SendPropertyChanged("RepairPersonFN");
					this.OnRepairPersonFNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairPersonLN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RepairPersonLN
		{
			get
			{
				return this._RepairPersonLN;
			}
			set
			{
				if ((this._RepairPersonLN != value))
				{
					this.OnRepairPersonLNChanging(value);
					this.SendPropertyChanging();
					this._RepairPersonLN = value;
					this.SendPropertyChanged("RepairPersonLN");
					this.OnRepairPersonLNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairPersonNum", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string RepairPersonNum
		{
			get
			{
				return this._RepairPersonNum;
			}
			set
			{
				if ((this._RepairPersonNum != value))
				{
					this.OnRepairPersonNumChanging(value);
					this.SendPropertyChanging();
					this._RepairPersonNum = value;
					this.SendPropertyChanged("RepairPersonNum");
					this.OnRepairPersonNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairPersonEmail", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RepairPersonEmail
		{
			get
			{
				return this._RepairPersonEmail;
			}
			set
			{
				if ((this._RepairPersonEmail != value))
				{
					this.OnRepairPersonEmailChanging(value);
					this.SendPropertyChanging();
					this._RepairPersonEmail = value;
					this.SendPropertyChanged("RepairPersonEmail");
					this.OnRepairPersonEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RepairPerson_MaintenanceSchedule", Storage="_MaintenanceSchedules", ThisKey="RepairPersonID", OtherKey="RepairPersonID")]
		public EntitySet<MaintenanceSchedule> MaintenanceSchedules
		{
			get
			{
				return this._MaintenanceSchedules;
			}
			set
			{
				this._MaintenanceSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MaintenanceSchedules(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.RepairPerson = this;
		}
		
		private void detach_MaintenanceSchedules(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.RepairPerson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestStatus")]
	public partial class RequestStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReqStatusID;
		
		private int _BorrowDetailsID;
		
		private int _AdminID;
		
		private string _RequestStatus1;
		
		private string _AdminComments;
		
		private EntityRef<Admin> _Admin;
		
		private EntityRef<BorrowDetail> _BorrowDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReqStatusIDChanging(int value);
    partial void OnReqStatusIDChanged();
    partial void OnBorrowDetailsIDChanging(int value);
    partial void OnBorrowDetailsIDChanged();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    partial void OnRequestStatus1Changing(string value);
    partial void OnRequestStatus1Changed();
    partial void OnAdminCommentsChanging(string value);
    partial void OnAdminCommentsChanged();
    #endregion
		
		public RequestStatus()
		{
			this._Admin = default(EntityRef<Admin>);
			this._BorrowDetail = default(EntityRef<BorrowDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReqStatusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReqStatusID
		{
			get
			{
				return this._ReqStatusID;
			}
			set
			{
				if ((this._ReqStatusID != value))
				{
					this.OnReqStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ReqStatusID = value;
					this.SendPropertyChanged("ReqStatusID");
					this.OnReqStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowDetailsID", DbType="Int NOT NULL")]
		public int BorrowDetailsID
		{
			get
			{
				return this._BorrowDetailsID;
			}
			set
			{
				if ((this._BorrowDetailsID != value))
				{
					if (this._BorrowDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._BorrowDetailsID = value;
					this.SendPropertyChanged("BorrowDetailsID");
					this.OnBorrowDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int NOT NULL")]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._Admin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="RequestStatus", Storage="_RequestStatus1", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string RequestStatus1
		{
			get
			{
				return this._RequestStatus1;
			}
			set
			{
				if ((this._RequestStatus1 != value))
				{
					this.OnRequestStatus1Changing(value);
					this.SendPropertyChanging();
					this._RequestStatus1 = value;
					this.SendPropertyChanged("RequestStatus1");
					this.OnRequestStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminComments", DbType="NVarChar(MAX)")]
		public string AdminComments
		{
			get
			{
				return this._AdminComments;
			}
			set
			{
				if ((this._AdminComments != value))
				{
					this.OnAdminCommentsChanging(value);
					this.SendPropertyChanging();
					this._AdminComments = value;
					this.SendPropertyChanged("AdminComments");
					this.OnAdminCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_RequestStatus", Storage="_Admin", ThisKey="AdminID", OtherKey="AdminID", IsForeignKey=true)]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.RequestStatus.Remove(this);
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.RequestStatus.Add(this);
						this._AdminID = value.AdminID;
					}
					else
					{
						this._AdminID = default(int);
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BorrowDetail_RequestStatus", Storage="_BorrowDetail", ThisKey="BorrowDetailsID", OtherKey="BorrowDetailsID", IsForeignKey=true)]
		public BorrowDetail BorrowDetail
		{
			get
			{
				return this._BorrowDetail.Entity;
			}
			set
			{
				BorrowDetail previousValue = this._BorrowDetail.Entity;
				if (((previousValue != value) 
							|| (this._BorrowDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BorrowDetail.Entity = null;
						previousValue.RequestStatus.Remove(this);
					}
					this._BorrowDetail.Entity = value;
					if ((value != null))
					{
						value.RequestStatus.Add(this);
						this._BorrowDetailsID = value.BorrowDetailsID;
					}
					else
					{
						this._BorrowDetailsID = default(int);
					}
					this.SendPropertyChanged("BorrowDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierID;
		
		private string _SupplierName;
		
		private string _SupplierNum;
		
		private string _ContactPersonN;
		
		private EntitySet<Asset> _Assets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIDChanging(int value);
    partial void OnSupplierIDChanged();
    partial void OnSupplierNameChanging(string value);
    partial void OnSupplierNameChanged();
    partial void OnSupplierNumChanging(string value);
    partial void OnSupplierNumChanged();
    partial void OnContactPersonNChanging(string value);
    partial void OnContactPersonNChanged();
    #endregion
		
		public Supplier()
		{
			this._Assets = new EntitySet<Asset>(new Action<Asset>(this.attach_Assets), new Action<Asset>(this.detach_Assets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierID
		{
			get
			{
				return this._SupplierID;
			}
			set
			{
				if ((this._SupplierID != value))
				{
					this.OnSupplierIDChanging(value);
					this.SendPropertyChanging();
					this._SupplierID = value;
					this.SendPropertyChanged("SupplierID");
					this.OnSupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this.OnSupplierNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierName = value;
					this.SendPropertyChanged("SupplierName");
					this.OnSupplierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierNum", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SupplierNum
		{
			get
			{
				return this._SupplierNum;
			}
			set
			{
				if ((this._SupplierNum != value))
				{
					this.OnSupplierNumChanging(value);
					this.SendPropertyChanging();
					this._SupplierNum = value;
					this.SendPropertyChanged("SupplierNum");
					this.OnSupplierNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPersonN", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContactPersonN
		{
			get
			{
				return this._ContactPersonN;
			}
			set
			{
				if ((this._ContactPersonN != value))
				{
					this.OnContactPersonNChanging(value);
					this.SendPropertyChanging();
					this._ContactPersonN = value;
					this.SendPropertyChanged("ContactPersonN");
					this.OnContactPersonNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Asset", Storage="_Assets", ThisKey="SupplierID", OtherKey="SupplierID")]
		public EntitySet<Asset> Assets
		{
			get
			{
				return this._Assets;
			}
			set
			{
				this._Assets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Assets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaintenanceSchedule")]
	public partial class MaintenanceSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MainScheduleID;
		
		private int _AssetID;
		
		private int _RepairPersonID;
		
		private System.Nullable<System.DateTime> _LastMaintDate;
		
		private System.Nullable<System.DateTime> _NextMaintDate;
		
		private string _MaintType;
		
		private string _MaintDescription;
		
		private EntityRef<Asset> _Asset;
		
		private EntityRef<RepairPerson> _RepairPerson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMainScheduleIDChanging(int value);
    partial void OnMainScheduleIDChanged();
    partial void OnAssetIDChanging(int value);
    partial void OnAssetIDChanged();
    partial void OnRepairPersonIDChanging(int value);
    partial void OnRepairPersonIDChanged();
    partial void OnLastMaintDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastMaintDateChanged();
    partial void OnNextMaintDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextMaintDateChanged();
    partial void OnMaintTypeChanging(string value);
    partial void OnMaintTypeChanged();
    partial void OnMaintDescriptionChanging(string value);
    partial void OnMaintDescriptionChanged();
    #endregion
		
		public MaintenanceSchedule()
		{
			this._Asset = default(EntityRef<Asset>);
			this._RepairPerson = default(EntityRef<RepairPerson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainScheduleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MainScheduleID
		{
			get
			{
				return this._MainScheduleID;
			}
			set
			{
				if ((this._MainScheduleID != value))
				{
					this.OnMainScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._MainScheduleID = value;
					this.SendPropertyChanged("MainScheduleID");
					this.OnMainScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetID", DbType="Int NOT NULL")]
		public int AssetID
		{
			get
			{
				return this._AssetID;
			}
			set
			{
				if ((this._AssetID != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssetIDChanging(value);
					this.SendPropertyChanging();
					this._AssetID = value;
					this.SendPropertyChanged("AssetID");
					this.OnAssetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairPersonID", DbType="Int NOT NULL")]
		public int RepairPersonID
		{
			get
			{
				return this._RepairPersonID;
			}
			set
			{
				if ((this._RepairPersonID != value))
				{
					if (this._RepairPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRepairPersonIDChanging(value);
					this.SendPropertyChanging();
					this._RepairPersonID = value;
					this.SendPropertyChanged("RepairPersonID");
					this.OnRepairPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastMaintDate", DbType="Date")]
		public System.Nullable<System.DateTime> LastMaintDate
		{
			get
			{
				return this._LastMaintDate;
			}
			set
			{
				if ((this._LastMaintDate != value))
				{
					this.OnLastMaintDateChanging(value);
					this.SendPropertyChanging();
					this._LastMaintDate = value;
					this.SendPropertyChanged("LastMaintDate");
					this.OnLastMaintDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextMaintDate", DbType="Date")]
		public System.Nullable<System.DateTime> NextMaintDate
		{
			get
			{
				return this._NextMaintDate;
			}
			set
			{
				if ((this._NextMaintDate != value))
				{
					this.OnNextMaintDateChanging(value);
					this.SendPropertyChanging();
					this._NextMaintDate = value;
					this.SendPropertyChanged("NextMaintDate");
					this.OnNextMaintDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MaintType
		{
			get
			{
				return this._MaintType;
			}
			set
			{
				if ((this._MaintType != value))
				{
					this.OnMaintTypeChanging(value);
					this.SendPropertyChanging();
					this._MaintType = value;
					this.SendPropertyChanged("MaintType");
					this.OnMaintTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintDescription", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MaintDescription
		{
			get
			{
				return this._MaintDescription;
			}
			set
			{
				if ((this._MaintDescription != value))
				{
					this.OnMaintDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MaintDescription = value;
					this.SendPropertyChanged("MaintDescription");
					this.OnMaintDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_MaintenanceSchedule", Storage="_Asset", ThisKey="AssetID", OtherKey="AssetID", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.MaintenanceSchedules.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.MaintenanceSchedules.Add(this);
						this._AssetID = value.AssetID;
					}
					else
					{
						this._AssetID = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RepairPerson_MaintenanceSchedule", Storage="_RepairPerson", ThisKey="RepairPersonID", OtherKey="RepairPersonID", IsForeignKey=true)]
		public RepairPerson RepairPerson
		{
			get
			{
				return this._RepairPerson.Entity;
			}
			set
			{
				RepairPerson previousValue = this._RepairPerson.Entity;
				if (((previousValue != value) 
							|| (this._RepairPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RepairPerson.Entity = null;
						previousValue.MaintenanceSchedules.Remove(this);
					}
					this._RepairPerson.Entity = value;
					if ((value != null))
					{
						value.MaintenanceSchedules.Add(this);
						this._RepairPersonID = value.RepairPersonID;
					}
					else
					{
						this._RepairPersonID = default(int);
					}
					this.SendPropertyChanged("RepairPerson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
